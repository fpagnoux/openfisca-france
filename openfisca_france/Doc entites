In all the following examples, two families:
    - 2 parents with 2 kids
    - 1 single parent with 1 kid

Entity -> Person

# entity.project(input, role = None)

    Projects the value of a variable defined on a entity on all its members (with the given role)

    ## Example:

        ```py
        # af = [20000, 5000]
        ```

        ```py
        def function(individu, period):
            projected_af = individu.famille.project(af)
            >>> [20000, 20000, 20000, 20000, 5000, 5000]

        ```

        ```py
        def function(individu, period):
            af = individu.famille.calculate('af', role = PARENT)
            projected_af = individu.famille.project(af, role = PARENT)
            >>> [20000, 20000, 0, 0, 5000, 0]

        ```

# entity.project_on_first_person(input)

    Projects the value of a variable defined on a entity on the first of its members.
    This is used when you need the arbitrarily attribute a variable defined to an entity to one and only one of its members.

    ## Example:

        ```py
        # af = [20000, 5000]
        ```

        ```py
        def function(individu, period):
            individu.famille.project_on_first_person(af)
            >>> [20000, 0, 0, 0, 5000, 0]

        ```

# entity.share_between_members(input, role = None)

    Share the value of a variable defined on a entity between all its members (with the given role)

    ## Example:

        ```py
        # af = [20000, 5000]
        ```

        ```py
        def function(individu, period):
            shared_af = individu.famille.share_between_members(af, role = PARENT)
            >>> [10000, 10000, 0, 0, 5000, 0]

        ```

Persons -> Entity

# entity.sum(input, role = None)

    Sum the value of a variable defined on a person for all the entity members (with the given role)

    ## Example:

        ```py
        # salary = [1000, 1500, 0, 0, 3000, 500]
        ```

        ```py
        def function(famille, period):
            sum_salary = famille.sum(salary)
            >>> [2500, 3500]

        ```

        ```py
        def function(individu, period):
            sum_salary_parents = famille.sum(salary, role = PARENT)
            >>> [2500, 3000]

        ```

# entity.any(input, role = None)

    Return true for an entity if a variable is true for at least one its members (with the given role)

    ## Example:

        ```py
        # age = [40, 37, 7, 9, 54, 20]
        ```

        ```py
        def function(famille, period):
            condition_age = (age <= 18)
            famille.any(condition_age)
            >>> [True, False]

        ```

        ```py
        def function(individu, period):
            condition_age_2 = (age > 18)
            famille.any(condition_age_2, role = ENFANT)
            >>> [False, True]

        ```

# entity.all(input, role = None)

    Return true for an entity if a variable is true for all its members (with the given role)

    ## Example:

        ```py
        # age = [40, 37, 7, 9, 54, 20]
        ```

        ```py
        def function(famille, period):
            famille.all(age >= 18)
            >>> [False, True]

        ```

        ```py
        def function(individu, period):
            famille.all(age >= 18, role = PARENT)
            >>> [True, True]

        ```

# entity.max(input, role = None)

    Return the maximum value of a variables for an entity's members (with the given role)

    ## Example:

        ```py
        # age = [40, 37, 7, 9, 54, 20]
        ```

        ```py
        def function(famille, period):
            famille.max(age)
            >>> [40, 54]

        ```

        ```py
        def function(famille, period):
            famille.max(age, role = ENFANT)
            >>> [9, 20]

        ```

# entity.min(input, role = None)

    Return the minimum value of a variables for an entity's members (with the given role)

    ## Example:

        ```py
        # age = [40, 37, 7, 9, 54, 20]
        ```

        ```py
        def function(famille, period):
            famille.min(age)
            >>> [7, 20]

        ```

        ```py
        def function(individu, period):
            famille.min(age, role = PARENT)
            >>> [37, 54]

        ```

Person -> Person

# entity.swap(input, role)

    For a variable defined on a person, returns the value for the other person with a given role in the entity. Mostly used to get the value of a variable for the partner/husband/wife.

    ## Example:

        ```py
        # salaire = [1000, 1500, 0, 0, 3000, 500]
        ```

        ```py
        def function(individu, period):
            individu.famille.swap(salaire, role = PARENT)
            >>> [1500, 1000, 0, 0, 0, 0]

        ```

Entity -> Entity

# entity.transpose_to_entity(input, target_entity_type)

    For a variable defined on an entity (e.g. Familles), returns the transposed value for another type of entity (e.g. FoyersFiscaux), using the first member of the origin entity as a pivot.

    ## Example:

        ```py
        # af = [20000, 5000]
        ```

        ```py
        def function(foyer_fiscal, period):
            af = famille.calculate('af')
            af_foyer_fiscal = famille.transpose_to_entity(af, target_entity_type = FoyersFiscaux)

            >>> [1500, 1000, 0, 0, 0, 0]

        ```

# entity.value_from_person(input, role, default = 0)

    For a variable defined on an person, returns the value for the person in the entity with the given role. If there is not such a person, the default value will be returned.

    ## Example:

        ```py
        # age = [40, 37, 7, 9, 54, 20]
        ```

        ```py
        def function(foyer_fiscal, period):
            ages = foyers_fiscaux.members.calculate('age')
            age_conjoint = foyers_fiscaux.value_from_person(age, role = CONJOINT)

            >>> [37, 0]

        ```



---> ToDO:
    - Role_in
